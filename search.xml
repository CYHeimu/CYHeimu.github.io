<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>O(nlogn)数组寻找差值</title>
    <url>/2022/03/25/O-nlogn-%E6%95%B0%E7%BB%84%E5%AF%BB%E6%89%BE%E5%B7%AE%E5%80%BC/</url>
    <content><![CDATA[<p>设一个长度为$n$的数组$a$，与一个数$k$，问数组中是否存在$2$个数$a$、$b$使得$| a - b | &#x3D; k$。</p>
<ol>
<li>对原数组排序。</li>
<li>对原数组去重得到数组$b$，长度为$len$。</li>
<li>扩充数组$b$至长度为$2 \cdot len$使得$b_{i + len} &#x3D; b_i - k$。</li>
<li>对扩充后的数组排序。</li>
<li>寻找是否有相邻的相同元素。若有，则存在；反之不存在。</li>
</ol>
<p>会有更简单的办法，但我暂时是想出来了这个。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> a[<span class="number">200010</span>];</span><br><span class="line"><span class="type">int</span> b[<span class="number">400010</span>],len;</span><br><span class="line">     </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solv</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;k);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">sort</span>(a+<span class="number">1</span>,a+n+<span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    len=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n*<span class="number">2</span>;i++) b[i]=<span class="number">0</span>;</span><br><span class="line">    b[len]=<span class="number">1000000010</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="keyword">if</span>(a[i]!=b[len]) b[++len]=a[i];</span><br><span class="line">    	</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=len;i++) b[i+len]=b[i]-k;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">sort</span>(b+<span class="number">1</span>,b+len*<span class="number">2</span>+<span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=len*<span class="number">2</span><span class="number">-1</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">    	<span class="keyword">if</span>(b[i]==b[i+<span class="number">1</span>])</span><br><span class="line">    	&#123;</span><br><span class="line">    		<span class="built_in">printf</span>(<span class="string">&quot;YES\n&quot;</span>);</span><br><span class="line">    		<span class="keyword">return</span>;</span><br><span class="line">    	&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;NO\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法比赛</category>
      </categories>
      <tags>
        <tag>排序</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2022/05/11/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>博客问题指南</title>
    <url>/2022/05/11/%E5%8D%9A%E5%AE%A2%E9%97%AE%E9%A2%98%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<p>自己在建站的过程也遇到了很多问题，于是在这里给自己写一篇问题指南。</p>
<p><a href="https://hexo.io/zh-cn/docs">Hexo文档</a></p>
<p>首先要记住的一点就是，优先在官方文档找解决方案。</p>
<h1 id="如何开启本地服务器"><a href="#如何开启本地服务器" class="headerlink" title="如何开启本地服务器"></a>如何开启本地服务器</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo s          #hexo server，默认端口4000</span><br><span class="line">hexo s -p 1234	#我的本地4000端口似乎被占用，所以要手动换一个端口</span><br></pre></td></tr></table></figure>

<h1 id="如何同步文件"><a href="#如何同步文件" class="headerlink" title="如何同步文件"></a>如何同步文件</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean   #清除缓存文件 db.json 和已生成的静态文件 public</span><br><span class="line">hexo g       #生成网站静态文件到默认设置的 public 文件夹(hexo generate 的缩写)</span><br><span class="line">hexo d       #自动生成网站静态文件，并部署到设定的仓库(hexo deploy 的缩写)</span><br></pre></td></tr></table></figure>

<h1 id="如何支持数学函数"><a href="#如何支持数学函数" class="headerlink" title="如何支持数学函数"></a>如何支持数学函数</h1><p>我采用的方法是使用 next 主题自带的方式。</p>
<p>打开 next 的 _config.yml，设置 mathjax 为 true ：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">math:</span></span><br><span class="line">  <span class="attr">mathjax:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>之后，在每篇博客前加入 mathjax: true 即可正常显示数学函数了。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 博客问题指南</span><br><span class="line">date: 2022-05-11 10:07:20</span><br><span class="line">tags:</span><br><span class="line">mathjax: true</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<h1 id="如何支持-md-语法显示图片"><a href="#如何支持-md-语法显示图片" class="headerlink" title="如何支持 md 语法显示图片"></a>如何支持 md 语法显示图片</h1><p>网上给出了诸多解决办法，但我使用了他们的方法后均没有成功，反而把博客搞崩了一次：（。最后我在官方文档里找到了适合我的解决方法，在此复述一遍。</p>
<p><a href="https://hexo.io/zh-cn/docs/asset-folders">Hexo资源文件夹</a></p>
<p>首先对 hexo 的 _config.yml 进行如下修改：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>修改后每当进行 new post 时，将会自动生成一个同名文件夹。我们要把需使用的图片放入此文件夹。</p>
<p>之后安装 hexo-renderer-marked 插件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-renderer-marked --save</span><br></pre></td></tr></table></figure>

<p>安装完成后，在 hexo 的 _config.yml 中添加如下语句：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">marked:</span></span><br><span class="line">  <span class="attr">prependRoot:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">postAsset:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>此时，我们就已经可以使用 <code>![](image.jpg)</code> 来引用图片了。</p>
<h1 id="Cannot-GET-tags-系列问题"><a href="#Cannot-GET-tags-系列问题" class="headerlink" title="Cannot GET \tags\ 系列问题"></a>Cannot GET \tags\ 系列问题</h1><p><img src="/2022/05/11/%E5%8D%9A%E5%AE%A2%E9%97%AE%E9%A2%98%E6%8C%87%E5%8D%97/1.png" alt="img"></p>
<p>在 next 的 _config.yml中取消了 tags 的注释，后产生了此错误。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-tags</span></span><br></pre></td></tr></table></figure>

<p>原因是还需要进行后续的配置。首先创建新的 page：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new page &quot;tags&quot;</span><br></pre></td></tr></table></figure>

<p>此时 source 文件夹下会新建 tags 文件夹，其下还会产生 index.md 文件，对其进行如下修改：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">标签</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2022-05-11 16:15:22</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">&quot;tags&quot;</span>	<span class="comment">#写入本句，这句话的作用似乎是用来识别这个页面是&quot;tags&quot;预置页面</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure>

<p>在这之后，我们就可以愉快的为文章添加标签了，格式如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">博客问题指南</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2022-05-11 10:07:20</span></span><br><span class="line"><span class="attr">tags:</span></span><br><span class="line">	<span class="bullet">-</span> <span class="string">&quot;博客&quot;</span></span><br><span class="line">	<span class="bullet">-</span> <span class="string">&quot;其他&quot;</span></span><br><span class="line">	<span class="bullet">-</span> <span class="string">&quot;另一个&quot;</span></span><br><span class="line"><span class="attr">mathjax:</span> <span class="literal">true</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure>

<p>其余几项如关于（about）、分类（categories）等同理。</p>
<p><a href="https://www.icode9.com/content-4-1119485.html">参考</a></p>
]]></content>
      <categories>
        <category>问题指南</category>
      </categories>
      <tags>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>博弈论</title>
    <url>/2022/02/12/%E5%8D%9A%E5%BC%88%E8%AE%BA/</url>
    <content><![CDATA[<p>博弈论就是指有若干个人进行一些对弈，并且默认每个人都可以找到当前的最优解，最后寻找有没有哪个人有必胜&#x2F;必败的的策略。</p>
<h1 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h1><p><strong>移动（Move）</strong>：对游戏局面的改变。<br><strong>局面（Position）</strong>：游戏进行中的一种状态。每个局面都对应着一个当前合法操作的集合。<br>​<strong>必败态（P-Position）</strong>：在当前的局面下，先手必败<br>​<strong>必胜态（N-Position）</strong>：在当前的局面下，先手必胜</p>
<p><strong>有关局面的性质：</strong></p>
<ul>
<li>合法操作集合为空的局面是必败态</li>
<li>可以移动到必败态的局面是必胜态</li>
<li>只能移动到必胜态的局面是必败态</li>
</ul>
<h1 id="公平组合游戏（ICG）"><a href="#公平组合游戏（ICG）" class="headerlink" title="公平组合游戏（ICG）"></a>公平组合游戏（ICG）</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><ul>
<li>两名选手</li>
<li>两名选手轮流行动，每一次行动可以在有限合法操作集合中选择一个</li>
<li>游戏的任何一种可能的局面，合法操作集合只取决于这个局面本身，不取决于轮到哪名选手操作、以前的任何操作、骰子的点数或者其它因素</li>
<li>如果轮到某名选手移动，且这个局面的合法的移动集合为空（也就是说此时无法进行移动），则这名选手负</li>
</ul>
<h2 id="nim游戏"><a href="#nim游戏" class="headerlink" title="nim游戏"></a>nim游戏</h2><p><a href="https://www.luogu.com.cn/problem/P2197">nim游戏</a></p>
<p><strong>题目大意</strong>：有n堆石子，每堆有$s_i$个，两人依次从中任意一堆中取至少1个的任意数量的石子，问先手有没有必胜策略。</p>
<p><strong>在本游戏中可以得到一个结论：</strong><br>$$<br>当且仅当s_1 \oplus s_2 \oplus s_3 \oplus \cdots \oplus s_n &#x3D; 0时，局面为必败态<br>$$<br><strong>证明：</strong></p>
<ul>
<li>当石子数量和为0时为必败态（此时异或和为0）</li>
<li>当各石子堆异或和为$k(k \neq 0)$时，设k的最高位二进制1的位数为j，则我们一定能找到一堆石子$s_i$，且$s_i$的二进制第j位为1。将$s_i$的数量变为$s_i \oplus k$（显然在第j位为1的前提下$s_i &gt; s_i \oplus k$），此时各石子堆异或和便为0了（$x \oplus y \oplus y &#x3D; x$）。（必胜态转必败态）</li>
<li>若异或和为0且存在数量不为0的石子堆，不能找到一种方法使异或和仍为0。（异或的性质）（必败态转必胜态）</li>
</ul>
<p><strong>代码：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> t,n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;t);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> v=<span class="number">1</span>;v&lt;=t;v++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> ans,lin;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;ans);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;lin);</span><br><span class="line">			ans^=lin;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span>(ans) <span class="built_in">printf</span>(<span class="string">&quot;Yes\n&quot;</span>);</span><br><span class="line">		<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;No\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="SG函数"><a href="#SG函数" class="headerlink" title="SG函数"></a>SG函数</h2><h3 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h3><p>给定一个有向无环图和一个起始顶点上的一枚棋子，Alice和Bob交替的将这枚棋子沿有向边进行移动，无法移动者判负。问是否有必胜策略。</p>
<p>该游戏可以认为是所有ICG游戏的抽象模型。也就是说，任何一个ICG游戏都可以通过把每个局面看成一个顶点，对每个局面和它的子局面连一条有向边来抽象成这个“有向图游戏”。</p>
<h3 id="函数建立"><a href="#函数建立" class="headerlink" title="函数建立"></a>函数建立</h3><p><strong>mex运算</strong>：这是施加于一个集合的运算，表示最小的不属于这个集合的非负整数，如mex{0, 1, 2, 4} &#x3D; 3、mex{2, 3, 5} &#x3D; 0、mex{} &#x3D; 0。</p>
<p>对于一个给定的有向无环图，定义关于图的每个顶点的SG函数sg如下：sg(x) &#x3D; mex{sg(y) | y是x的后继 }。也就是说，一个点的SG函数为在它所有后继中都未出现的最小的值。</p>
<p><strong>注意</strong>：由于这是一种类似递归的定义，所以对于一张有向无环图，每个点的SG值都是会被直接计算出来的。</p>
<h3 id="函数性质"><a href="#函数性质" class="headerlink" title="函数性质"></a>函数性质</h3><ul>
<li>没有出边的点，SG值为0。</li>
<li>对于一个$sg(x) &#x3D; 0$的顶点x，它的后继y都满足$sg(y) \neq 0$。</li>
<li>对于一个$sg(x) \neq 0$的顶点x，必定存在一个后继y都满足$sg(y) &#x3D; 0$。</li>
</ul>
<p>可以发现，SG函数的性质与必败态、必胜态的性质十分相似：</p>
<ul>
<li>顶点x所代表的局面是必败态当且仅当$sg(x) &#x3D; 0$。</li>
<li>顶点x所代表的局面是必胜态当且仅当$sg(x) &gt; 0$。</li>
</ul>
<h3 id="SG值的阶"><a href="#SG值的阶" class="headerlink" title="SG值的阶"></a>SG值的阶</h3><p>当$sg(x) &#x3D; k$时，表明对于任意一个$0 \leq i &lt; k$，都存在x的一个后继y满足$sg(y) &#x3D; i$。</p>
<p>因此当$sg(x) &#x3D; k$时，我们可以把这个点的SG值称为k阶SG值，它一定可以通过移动转换到一个拥有更低阶SG值的点。</p>
<h2 id="nim游戏与SG函数的联系"><a href="#nim游戏与SG函数的联系" class="headerlink" title="nim游戏与SG函数的联系"></a>nim游戏与SG函数的联系</h2><p>设有$G_1,G_2,G_3, \cdots ,G_n$个有向图游戏，定义游戏$G &#x3D; G_1 + G_2 + G_3 + \cdots + G_n$（游戏本身的加和，不是数学意义上的加和），移动规则为任选一个有向图$G_i$并移动上面的棋子。</p>
<p>Sprague-Grundy定理就是：<br>$$<br>\begin{aligned}<br>    &amp; 对于任意G &#x3D; G_1 + G_2 + G_3 + \cdots + G_n \\<br>    &amp; 有sg(G) &#x3D; sg(G_1) \oplus sg(G_2) \oplus \cdots \oplus sg(G_n) \\<br>    &amp; SG值相同局面，可以认为局面本质相同<br>\end{aligned}<br>$$<br>也就是说，游戏的和的SG函数值是它所有子游戏的SG函数值的异或。</p>
<p>之后我们可以发现，若将nim游戏中的每一堆石头看成一个有向图游戏，则nim游戏是一个符合上述定义的多个有向图相加的游戏G。因此我们可以分别计算每一堆石头的有向图所对应的SG值，再将所有的SG值进行异或从而得到nim游戏的SG值，从而找到必胜策略。</p>
<p><strong>注</strong>：对于任意一张子图$G_i$，它上面的不同的点要理解成本堆石头的当前状态，而不是整个nim游戏的当前状态，是多堆石头的不同状态得到的SG值异或得到了整个nim游戏的SG值，不存在一张有向图代表整个nim游戏（虽然的确可以存在这样一张有向图），而是nim游戏本身就是许多有向图的加和。这是我一开始不理解这个联系的重要一点。</p>
<p>不妨设第i个有向图游戏的点的值为$s_i$，当且仅当本点与本石子堆还剩$s_i$个石子的状态对应。</p>
<p>因此还剩一个问题：对于nim游戏来说，由于直接异或每堆石子的数量即可得到答案，因此：<br>$$<br>\begin{aligned}<br>    &amp; sg(G) &#x3D; s_1 \oplus s_2 \oplus s_3 \oplus \cdots \oplus s_n \\<br>    &amp; sg(G) &#x3D; sg(s_1) \oplus sg(s_2) \oplus \cdots \oplus sg(s_n) \\<br>\end{aligned}<br>$$<br>我们可以得到一个结论：$sg(s_i) &#x3D; s_i$。那么为什么？</p>
<p>这里不做严格证明，不过不难想象，这与SG值阶的转换有关。在标准的nim游戏中，<strong>对于每一堆石子我们每次都可以取任意数量的石子</strong>，由于石子的所有可能数量与有向图上的点一一对应，因此这句话与<strong>本点的SG值可以转换为任意SG值更低阶的点</strong>相对应，也便是<strong>本点的后继是所有小于本点值的点的集合</strong>，因此：<br>$$<br>sg(s_i) &#x3D; mex { x | 0 \leq x &lt; s_i 且x为非负整数 } &#x3D; s_i<br>$$<br>至此，nim游戏与SG函数的联系论述完成。</p>
<h2 id="nim游戏的变形与SG值的计算方法"><a href="#nim游戏的变形与SG值的计算方法" class="headerlink" title="nim游戏的变形与SG值的计算方法"></a>nim游戏的变形与SG值的计算方法</h2><p>在标准的nim游戏中，我们每次可以取不少于1个的任意个石子，使得在转换中有$sg(s_i) &#x3D; s_i$。但大多的时候转换的规律不会这么简单。</p>
<p><strong>第一个例子：</strong></p>
<p><img src="/2022/02/12/%E5%8D%9A%E5%BC%88%E8%AE%BA/2.png" alt="img"></p>
<p><img src="/2022/02/12/%E5%8D%9A%E5%BC%88%E8%AE%BA/3.png" alt="img"></p>
<p><strong>第二个例子：</strong></p>
<p>有n个石子，每次只能取{1, 3, 4}个石子，先取完石子者胜利，那么各个数的SG值为多少？</p>
<p><img src="/2022/02/12/%E5%8D%9A%E5%BC%88%E8%AE%BA/1.png" alt="img"></p>
<p>sg[0]&#x3D;0，f[]&#x3D;{1,3,4}；</p>
<p>x&#x3D;1时，可以取走1-f{1}个石子，剩余{0}个，mex{sg[0]}&#x3D;{0}，故sg[1]&#x3D;1；</p>
<p>x&#x3D;2时，可以取走2-f{1}个石子，剩余{1}个，mex{sg[1]}&#x3D;{1}，故sg[2]&#x3D;0；</p>
<p>x&#x3D;3时，可以取走3-f{1,3}个石子，剩余{2,0}个，mex{sg[2],sg[0]}&#x3D;{0,0}，故sg[3]&#x3D;1；</p>
<p>x&#x3D;4时，可以取走4-f{1,3,4}个石子，剩余{3,1,0}个，mex{sg[3],sg[1],sg[0]}&#x3D;{1,1,0},故sg[4]&#x3D;2；</p>
<p>x&#x3D;5时，可以取走5-f{1,3,4}个石子，剩余{4,2,1}个，mex{sg[4],sg[2],sg[1]}&#x3D;{2,0,1},故sg[5]&#x3D;3；</p>
<p>以此类推…</p>
<table>
<thead>
<tr>
<th align="center">x</th>
<th align="center">0</th>
<th align="center">1</th>
<th align="center">2</th>
<th align="center">3</th>
<th align="center">4</th>
<th align="center">5</th>
<th align="center">6</th>
<th align="center">7</th>
<th align="center">8</th>
<th align="center">…</th>
</tr>
</thead>
<tbody><tr>
<td align="center">sg[x]</td>
<td align="center">0</td>
<td align="center">1</td>
<td align="center">0</td>
<td align="center">1</td>
<td align="center">2</td>
<td align="center">3</td>
<td align="center">2</td>
<td align="center">0</td>
<td align="center">1</td>
<td align="center">…</td>
</tr>
</tbody></table>
<p>由此我们可以得到一些规律，总结出<strong>SG值的计算方法</strong>：</p>
<ul>
<li>可选步数为任意步，SG(x) &#x3D; x。</li>
<li>可选步数为1~m的连续整数，SG(x) &#x3D; x % (m+1)。</li>
<li>可选步数为一系列不连续的数，用模板计算。</li>
</ul>
<p><strong>模板</strong> 两种方法我觉得都是搜索</p>
<p>方法一：打表 f[]可以取走的石子个数,注意f[]需要从小到大排序 sg[]SG函数值；vis[]标记数组，用于求mex{}</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> f[MAXN],sg[MAXN];</span><br><span class="line"><span class="type">bool</span> vis[MAXN];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">getSG</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">sort</span>(f+<span class="number">1</span>,f+<span class="number">1</span>+n);</span><br><span class="line">	<span class="built_in">memset</span>(sg,<span class="number">0</span>,<span class="built_in">sizeof</span>(sg));</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="built_in">sizeof</span>(vis));</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j=<span class="number">1</span>; f[j]&lt;=i; j++)<span class="comment">//f排序是为了让每一种取法都循环到</span></span><br><span class="line">			vis[sg[i-f[j]]]=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j=<span class="number">0</span>; j&lt;=n; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (vis[j]==<span class="number">0</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				sg[i]=j; <span class="keyword">break</span>;</span><br><span class="line">			&#125;	</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>方法二：dfs s数组是定义特殊取法规则的数组，注意要按照从小到大排序；n表示集合大小 SG函数要初始化为-1，每个集合只需初始化一遍</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> s[MAXN],sg[MAXN],n;</span><br><span class="line"><span class="type">bool</span> vis[MAXN];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">SG_dfs</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (sh[x]!=<span class="number">-1</span>)</span><br><span class="line">		<span class="keyword">return</span> sg[x];</span><br><span class="line">	<span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="built_in">sizeof</span>(vis));</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;n; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (x&gt;=s[i])</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">SG_dfs</span>(x-s[i]);</span><br><span class="line">			vis[sg[x-s[i]]]=<span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (!vis[i])</span><br><span class="line">			<span class="keyword">return</span> sg[x]=i;</span><br><span class="line">		i++;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.luogu.com.cn/problem/solution/P2197">https://www.luogu.com.cn/problem/solution/P2197</a></p>
<p><a href="https://blog.csdn.net/amf12345/article/details/97934508">https://blog.csdn.net/amf12345/article/details/97934508</a></p>
<p><a href="https://baike.baidu.com/item/SG%E5%87%BD%E6%95%B0/1004609?fr=aladdin">https://baike.baidu.com/item/SG%E5%87%BD%E6%95%B0/1004609?fr=aladdin</a></p>
]]></content>
      <categories>
        <category>算法比赛</category>
      </categories>
      <tags>
        <tag>博弈论</tag>
        <tag>最优解</tag>
      </tags>
  </entry>
  <entry>
    <title>并查集</title>
    <url>/2021/03/30/%E5%B9%B6%E6%9F%A5%E9%9B%86/</url>
    <content><![CDATA[<p>并查集是一种在线维护集合关系的数据结构，它支持两个操作：</p>
<ul>
<li><strong>合并</strong>：将两个元素所属的集合合并为一个。</li>
<li><strong>查询</strong>：查询某两个元素是否在同一集合中。</li>
</ul>
<p><strong>时间复杂度</strong>：合并与查询都接近$O(1)$。</p>
<h2 id="普通并查集"><a href="#普通并查集" class="headerlink" title="普通并查集"></a>普通并查集</h2><p>假设我们有n个元素，它们分别使用1~n表示。并查集为了实现维护集合关系，为每个元素增加了一个用来指向其他元素的$fa_i$属性（父亲属性）。该属性初始值$fa_i &#x3D; i$（即指向自己）。并查集就是利用了这个父亲属性将不同的元素串连起来，组成不同的集合。</p>
<p>比如有3个元素A、B、C，若我们想要使用fa[A] &#x3D; B的这种关系把它们联系起来形成一个集合，我们可能会这样串连他们（都为向上的有向线段）：</p>
<p><img src="/2021/03/30/%E5%B9%B6%E6%9F%A5%E9%9B%86/1.png" alt="img"></p>
<p>在我们画的图上，我们认为一个点的父亲节点就是该点上方的那个节点，即把图描述出来为：</p>
<ul>
<li>fa[A]&#x3D;B、fa[C]&#x3D;B、fa[B]&#x3D;B</li>
<li>fa[A]&#x3D;B、fa[B]&#x3D;C、fa[C]&#x3D;C</li>
</ul>
<p>由于每个元素都是单指向的，所以我们所能连接出的图的顶部有且只有一个元素（如第一个图为B，第二个图为C）。这个元素的fa为它本身，且集合内的任意元素在沿着fa的指引向上追溯时，一定会找到该元素。所以此元素便是该集合的唯一<strong>标识</strong>，这个向上追溯找到标识的操作便是并查集的核心。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(x==fa[x]) <span class="keyword">return</span> x;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">find</span>(fa[x]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>有了追溯标识的操作，我们便不难定义出合并与查询：</p>
<p>设x &#x3D; find(A)，y &#x3D; find(B)，即x为A元素所在集合的标识，y为B元素所在集合的标识。</p>
<p><strong>注</strong>：标识本身也是一个元素。在开始时$fa_i &#x3D; i$，也就是说每个元素单独构成一个只有自己的集合。</p>
<ul>
<li><strong>合并</strong>：fa[y] &#x3D; x。将两个元素所属的集合合并为一个。写成fa[x] &#x3D; y效果相同。</li>
<li><strong>查询</strong>：if(x &#x3D;&#x3D; y) 。查询某两个元素是否在同一集合中。</li>
</ul>
<p>看下面这个例子，这是执行了fa[D] &#x3D; B之后集合的样子。</p>
<p><img src="/2021/03/30/%E5%B9%B6%E6%9F%A5%E9%9B%86/2.png" alt="img"></p>
<p>首先我们确认一点，并查集下某个集合的结构就像一棵树，而标识正是这棵树的树根。</p>
<p>我们发现，随着合并次数的增加，树的深度越来越大，如果我们此时查询G所在集合的标识效率会大打折扣。我们可以通过一个小优化来提升效率。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(x==fa[x]) <span class="keyword">return</span> x;</span><br><span class="line">  <span class="keyword">return</span> fa[x]=<span class="built_in">find</span>(fa[x]);	<span class="comment">//这里变化了</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们在递归的过程中压缩了树的高度，向上找到树根后，在逐级下放的过程中将所有子节点的父节点都改变成了树根，使得树被压缩，从而在不影响集合标识的同时提升了find函数的效率，这是并查集的精髓（在带权并查集中会更有体现）。</p>
<p>find(G)后树的压缩情况：</p>
<p><img src="/2021/03/30/%E5%B9%B6%E6%9F%A5%E9%9B%86/3.png" alt="img"></p>
<h2 id="种类并查集"><a href="#种类并查集" class="headerlink" title="种类并查集"></a>种类并查集</h2><p><strong>注</strong>：此部分为本人理解，酌情参考。</p>
<p><a href="https://www.luogu.com.cn/problem/P1525">洛谷P1525 关押罪犯</a></p>
<p><del>看到最小的最大直接二分答案</del></p>
<p>分析一下不难发现，我们需要将罪犯划分为两个集合。</p>
<p>我们可能会使用这种策略：</p>
<ol>
<li>将罪犯组的怨气值由大到小排序，后从大到小依次判断。</li>
<li>若此组可以分开到两个监狱，则分到两个不同的监狱。</li>
<li>若此组不能被分开到两个监狱（1. 这组的两个人因前面的分配已经被分配到同一个监狱里了。2. 有一个相比两人间的仇恨与这两人都有深仇大恨的人已经入狱了），答案为此组怨气值。</li>
</ol>
<p>这个策略是正确的，但若想使用并查集解决便出现了问题。</p>
<p>并查集所支持的操作是将两个集合合并，而不是将两个集合间划分界限。这时，种类并查集孕育而生，它给了并查集更广泛的意义。</p>
<p>现在拓宽集合的概念，我们要为每个集合加上一个<strong>标签</strong>。如一个集合的标签为“它们应该在一起”，同样的，我们可以创造一个标签为“A和B应该分到不同监狱”的集合。当然不难发现这个集合是有限制的，我们定义的标签让我们希望这个集合中只有2个元素。与其说现在在用并查集维护集合，不如说我们现在在用并查集维护一种人与人间的<strong>关系</strong>。</p>
<p>在本题中，由于只有2座监狱，所以存在<strong>传递性</strong>：如果A应与C分开，B也应与C分开，那么A和B就应该在一起。依靠传递性，我们以C为媒介，将A和B间的关系连接了起来。</p>
<p>这时存在一个问题，我们按照这样的关系进行合并：</p>
<ul>
<li>A应与C分开，因此二者放入同一有“A和C应分开”标签的集合，A与C连接</li>
<li>B应与C分开，因此二者放入同一有“B和C应分开”标签的集合，B与C连接</li>
<li>哦吼，A、B、C进入了一个集合，关系混乱了</li>
</ul>
<p>可以看到，使用这种只能存在2个元素的标签虽然想法很美好，但现实很残酷。</p>
<p>为了解决这个问题，我们不仅引入了一种标签，还引入了一种媒介。我们对应每一个罪犯X创建一个<strong>分开媒介!X</strong>，如罪犯C的分开媒介!C。!C存在的目的就是与“不能与C在一起”的罪犯连接起来，形成一个集合，理所当然的，“不能与C在一起”便是这个集合的标签。按照这种理念合并：</p>
<ul>
<li>A应与C分开，因此A应放入“不能与C在一起”的集合，A与!C连接，<strong>同时C应放入“不能与A在一起”的集合，C与!A连接</strong></li>
<li>B应与C分开，因此B应放入“不能与C在一起”的集合，B与!C连接，<strong>同时C应放入“不能与B在一起”的集合，C与!B连接</strong></li>
<li>!C-A-B、!A-C、!B-C，逻辑和结构上很清晰</li>
</ul>
<p><strong>注</strong>：C与!C虽有联系但有本质区别，C是真实存在的罪犯，而!C是一种用来表示“不能与C在一起”的关系的媒介，不过两者在编程过程中被视为同等的元素对待。</p>
<p>题目被解决了，策略如下：</p>
<p>在代码实现中，若有n个罪犯，对应编号分别为$a_i$，那么编号为$a_i$的罪犯的分开媒介的编号使用$a_i + n$表示。</p>
<p>若a、b为一组罪犯的两个编号，设x &#x3D; find(a)，y &#x3D; find(b)，nx &#x3D; find(a + n)，ny &#x3D; find(b + n)。</p>
<ol>
<li>将罪犯组的怨气值由大到小排序，后从大到小依次判断。</li>
<li>如果此组可以分开到两个监狱，则fa[x] &#x3D; ny，fa[y] &#x3D; nx。</li>
<li>如果起了冲突，也就是(x &#x3D;&#x3D; y || nx &#x3D;&#x3D; ny)，输出此组怨气值。</li>
</ol>
<p>再来简略的看一道题：</p>
<p><a href="https://www.luogu.com.cn/problem/P2024">洛谷P2024 食物链</a></p>
<p>对于一类物种，与其他物种应有3种关系：与X同类，被X吃（X的猎物），X被吃（X的猎人）。</p>
<p>假设有n个动物，对应编号分别为$a_i$，那么编号为$a_i$的罪犯的猎物媒介的编号使用$a_i + n$表示，猎人媒介的编号使用$a_i + 2n$表示。</p>
<ul>
<li>当A和B是同类时：分别合并A和B，A的猎物和B的猎物，A的天敌和B的天敌。</li>
<li>当A吃B时：分别合并A和B的天敌，A的猎物和B，<strong>A的猎人和B的猎物</strong>（容易被忽略）。</li>
</ul>
<p><strong>总结：</strong></p>
<ul>
<li>种类并查集是在维护不同事物间的一种<strong>关系</strong>。</li>
<li>编写时使用多倍长度的数组作为形容多种关系的<strong>媒介</strong>。</li>
</ul>
<p><strong>注意：</strong></p>
<ul>
<li>一个物品与另一个物品存在多个关系，在合并时要考虑所有关系的合并。</li>
<li>不同物品间一定要有连续性，也就是“都与A有同一种关系的东西应该是同一类”。</li>
<li>种类并查集只注重关系，到底哪堆人被分配到了哪个监狱不在考虑范围内。</li>
</ul>
<h2 id="带权并查集"><a href="#带权并查集" class="headerlink" title="带权并查集"></a>带权并查集</h2><p><a href="https://www.luogu.com.cn/problem/P1196">洛谷P1196 银河英雄传说</a></p>
<p>这道题看下来，其中合并和查询的部分使用普通的并查集就可以实现了，问题在于如何求出两个战舰之前的舰数。</p>
<p>不妨这样想，对于每个战舰$a_i$增加一个权值$d_i$用来表示此战舰与本列队头间的舰数，那么战舰$a_i$与$a_j$间的舰数即为$abs(a_i-a_j)-1$，元素带有权值即为带权并查集。现在要考虑的就是如何更新权值。</p>
<p>由于每次移动都是将一列舰队并到另一列的后方，那么对于被移动的那列舰队，所有战舰的$d_i$都应更新加上未移动的舰队的长度。由此发现，我们需要知道每队的长度来维护$d_i$，于是设每队的长度为$s_i$。</p>
<p>设x &#x3D; find(i), y &#x3D; find(j)，每一次移动，都有这样的变化：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">s[y]+=s[x];</span><br><span class="line">s[x]=<span class="number">0</span>;</span><br></pre></td></tr></table></figure>

<p>要注意的是，这里修改的是两个战舰所在集合的长度。现在长度修改好了，还需要的是利用更新过的长度去更新被移动的所有战舰的$d_i$，这是带权并查集的关键所在。怎么变，一个一个变吗？那样的话效率就和爆搜没有区别了。带权并查集利用了find()函数中的路径压缩优化步骤，巧妙的在路径压缩的过程中更新了$d_i$的值。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(in==<span class="string">&#x27;M&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">	d[x]+=s[y];	<span class="comment">//被移动舰队的标识战舰的di加上了长度</span></span><br><span class="line">	fa[x]=y;	<span class="comment">//合并，注意此时合并完的舰队的标志战舰已经变为了y，即树根</span></span><br><span class="line">	s[y]+=s[x];</span><br><span class="line">	s[x]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在一开始时，每列舰队只有1架战舰，因此每列的队头都是标识战舰（标识的意思看普通并查集），且<strong>合并操作不会改变这一规律</strong>。</p>
<p>合并操作完成后，本列舰队的标识战舰为y，同时我们称x战舰为“曾经的标识战舰”易。知$d_y &#x3D; 0$，而$d_x$被加上了$s_y$，由于在这一步操作前x始终为标识战舰，因此可知$d_x &#x3D; s_y$，可以看到整列被移动的舰队中只有它的$d_i$值被修改了。接下来看find()部分：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(x==fa[x]) <span class="keyword">return</span> x;</span><br><span class="line">	<span class="type">int</span> root=<span class="built_in">find</span>(fa[x]);	<span class="comment">//首先执行find()的递归操作</span></span><br><span class="line">	d[x]+=d[fa[x]];			<span class="comment">//回溯时距离更新</span></span><br><span class="line">	<span class="keyword">return</span> fa[x]=root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>首先明确一点，find(x)的操作只会更新x追溯到他的标识战舰的$d_i$的值和这些点的路径。</p>
<p>我们可以想到，被移动的战舰到队头的距离 &#x3D; 该战舰到曾经的标识战舰的距离（即$d_i$） + 曾经的标识战舰到队头的距离（即$d_x$），而在find()函数向上追溯的过程中，一定能够找到曾经的标识战舰（因为存在路径压缩，所以一定是fa[x]），利用他的值更新自己的值。利用这一点，继续推想：假如曾经的标识战舰处于尚未更新的状态（出现这种情况的原因是因为上面所明确的那一点，也就是还尚未更新过），那么曾经的标识战舰向上追溯又一定能找到“曾经的曾经的标识战舰”，从而利用其值更新自己，后原战舰再根据更新好的曾经的标识战舰的值更新自己的值。由此得出，若想得到正确的曾经的标识战舰的$d_x$则必须要先执行递归find(x)，之后在回溯时更新距离。由于路径压缩的的存在，所有的战舰在更新一次$d_i$后父节点会直接指向最新的标志战舰，而$d_y &#x3D; 0$，从而在当前状态下再次寻找同一战舰时不再更新。这便是路径压缩与$d_i$更新的巧妙配合。</p>
<p><img src="/2021/03/30/%E5%B9%B6%E6%9F%A5%E9%9B%86/4.png" alt="img"></p>
<p><strong>代码：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> t;</span><br><span class="line"><span class="type">int</span> fa[<span class="number">30010</span>];</span><br><span class="line"><span class="type">int</span> size[<span class="number">30010</span>];</span><br><span class="line"><span class="type">int</span> d[<span class="number">30010</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(x==fa[x]) <span class="keyword">return</span> x;</span><br><span class="line">	<span class="type">int</span> root=<span class="built_in">find</span>(fa[x]);</span><br><span class="line">	d[x]+=d[fa[x]];</span><br><span class="line">	<span class="keyword">return</span> fa[x]=root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">char</span> s[<span class="number">2</span>];</span><br><span class="line">	<span class="type">int</span> a,b;</span><br><span class="line">	<span class="type">int</span> dx,dy;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">30000</span>;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		fa[i]=i;</span><br><span class="line">		size[i]=<span class="number">1</span>;</span><br><span class="line">		d[i]=<span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;t);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=t;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%s%d%d&quot;</span>,s+<span class="number">1</span>,&amp;a,&amp;b);</span><br><span class="line">		dx=<span class="built_in">find</span>(a);</span><br><span class="line">		dy=<span class="built_in">find</span>(b);</span><br><span class="line">		<span class="keyword">if</span>(s[<span class="number">1</span>]==<span class="string">&#x27;M&#x27;</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			d[dx]+=size[dy];</span><br><span class="line">			fa[dx]=dy;</span><br><span class="line">			size[dy]+=size[dx];</span><br><span class="line">			size[dx]=<span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(s[<span class="number">1</span>]==<span class="string">&#x27;C&#x27;</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(dx!=dy) <span class="built_in">printf</span>(<span class="string">&quot;-1\n&quot;</span>);</span><br><span class="line">			<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">abs</span>(d[a]-d[b])<span class="number">-1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.luogu.com.cn/problem/solution/P1525">https://www.luogu.com.cn/problem/solution/P1525</a></p>
<p><a href="https://www.luogu.com.cn/problem/solution/P2024">https://www.luogu.com.cn/problem/solution/P2024</a></p>
<p><a href="https://www.luogu.com.cn/problem/solution/P1196">https://www.luogu.com.cn/problem/solution/P1196</a></p>
]]></content>
      <categories>
        <category>算法比赛</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>归并排序</title>
    <url>/2022/02/11/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<p>归并排序（MERGE-SORT）是利用<strong>归并</strong>的思想实现的排序方法，采用了分治策略。</p>
<p>归并排序的效率稳定。</p>
<p><strong>时间复杂度</strong>：$O(nlog_n)$</p>
<h1 id="分治"><a href="#分治" class="headerlink" title="分治"></a>分治</h1><p><strong>分</strong>：将原问题分成一些小的问题。</p>
<p><strong>治</strong>：将分的阶段得到的各答案”修补”在一起。</p>
<p>本算法使用了递归实现分治，理论上迭代也可。</p>
<p><img src="/2022/02/11/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/1.png" alt="img"></p>
<h1 id="合并有序子序列"><a href="#合并有序子序列" class="headerlink" title="合并有序子序列"></a>合并有序子序列</h1><p>合并有序子序列，即<strong>治</strong>的操作。</p>
<p><img src="/2022/02/11/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/2.png" alt="img">、<img src="/2022/02/11/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/3.png" alt="img"></p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p><a href="https://www.luogu.com.cn/problem/P1177">模板题点我</a></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> a[<span class="number">100010</span>];</span><br><span class="line"><span class="type">int</span> temp[<span class="number">100010</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">psort</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">	<span class="type">int</span> i=l,j=mid+<span class="number">1</span>,k=<span class="number">0</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">while</span>(i&lt;=mid||j&lt;=r)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(i&lt;=mid&amp;&amp;j&lt;=r)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(a[i]&lt;=a[j]) temp[++k]=a[i++];</span><br><span class="line">			<span class="keyword">else</span> temp[++k]=a[j++];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(i&lt;=mid) temp[++k]=a[i++];</span><br><span class="line">			<span class="keyword">else</span> temp[++k]=a[j++];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	k=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=l;i&lt;=r;i++) a[i]=temp[++k];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">msort</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">if</span>(r-l&gt;<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">msort</span>(l,mid);</span><br><span class="line">		<span class="built_in">msort</span>(mid+<span class="number">1</span>,r);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">psort</span>(l,r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">msort</span>(<span class="number">1</span>,n);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,a[i]);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.cnblogs.com/chengxiao/p/6194356.html">https://www.cnblogs.com/chengxiao/p/6194356.html</a></p>
]]></content>
      <categories>
        <category>算法比赛</category>
      </categories>
      <tags>
        <tag>排序</tag>
        <tag>数据结构</tag>
        <tag>分治</tag>
      </tags>
  </entry>
  <entry>
    <title>快速幂</title>
    <url>/2022/03/23/%E5%BF%AB%E9%80%9F%E5%B9%82/</url>
    <content><![CDATA[<p>快速幂是一种让计算机快速算出$a^b$的算法。</p>
<p>时间复杂度$O(\log b)$</p>
<p><strong>原理：</strong></p>
<p>任意一个十进制数都可以写成$\sum 2^i(i为本数二进制下为1的位的位数-1的)$的形式，这是由十进制与二进制间的转换得来的，如$4_{10} &#x3D; 100_{2} &#x3D; 2^2$、$7_{10} &#x3D; 111_{2} &#x3D; 2^2 + 2^1 + 2^0$、$19_{10} &#x3D; 10011_{2} &#x3D; 2^4 + 2^1 + 2^0$。我们将这种变化应用到$b$上，将原式变形：<br>$$<br>a^b &#x3D; a^{\sum 2^i} &#x3D; \prod a^{2^i}(i为b二进制下为1的位的位数-1)<br>$$<br>即对于代码来说，不断的找到$a^{2^i}$的值进行连乘就可以求得答案，因此我们需要一个简单有效的方法递推$a^{2^i}$的值。</p>
<p>当$i &#x3D; 1,2,3,…,n$时，易得到递推$a^{2^{i + 1}} &#x3D; {a^{2^i}}^2$。同时伴随的问题便是，$i$为本数二进制下所有为$1$的位的位数$-1$的数组，显然前面的定义大于这个数组，因此要增加一个判定条件，确定$b$的二进制的$i + 1$位是否为$1$。若是，则进行连乘，反之跳过。</p>
<p><strong>代码：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">fpow</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> ans=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span>(b&gt;<span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(b&amp;<span class="number">1</span>==<span class="number">1</span>) ans*=a;</span><br><span class="line">		a*=a;</span><br><span class="line">		b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法比赛</category>
      </categories>
      <tags>
        <tag>数论</tag>
      </tags>
  </entry>
  <entry>
    <title>筛法</title>
    <url>/2020/10/25/%E7%AD%9B%E6%B3%95/</url>
    <content><![CDATA[<p>筛法是一种用来求素数的方法。一般来说可以循序渐进的掌握暴力判断素数、埃氏筛法、欧拉筛法。</p>
<h1 id="暴力判断素数"><a href="#暴力判断素数" class="headerlink" title="暴力判断素数"></a>暴力判断素数</h1><p>时间复杂度$O(n^2)$(对于打出素数表来说)</p>
<p>利用素数只能被$1$和它本身整除的性质，我们可以把需判断的数$x$与$2…n - 1$取余。如果结果均不等于$0$，则为素数。</p>
<p><strong>代码：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"> <span class="number">1</span> <span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"> <span class="number">2</span> <span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"> <span class="number">3</span> <span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"> <span class="number">4</span> </span><br><span class="line"> <span class="number">5</span> <span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"> <span class="number">6</span> </span><br><span class="line"> <span class="number">7</span> <span class="type">int</span> n;</span><br><span class="line"> <span class="number">8</span> <span class="type">bool</span> flag;</span><br><span class="line"> <span class="number">9</span> </span><br><span class="line"><span class="number">10</span> <span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function">11 </span>&#123;</span><br><span class="line"><span class="number">12</span>     <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"><span class="number">13</span>     </span><br><span class="line"><span class="number">14</span>     <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)</span><br><span class="line"><span class="number">15</span>     &#123;</span><br><span class="line"><span class="number">16</span>         flag=<span class="literal">true</span>;</span><br><span class="line"><span class="number">17</span>         <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">2</span>;j&lt;=i<span class="number">-1</span>;j++)</span><br><span class="line"><span class="number">18</span>         &#123;</span><br><span class="line"><span class="number">19</span>             <span class="keyword">if</span>(i%j==<span class="number">0</span>)</span><br><span class="line"><span class="number">20</span>             &#123;</span><br><span class="line"><span class="number">21</span>                 flag=<span class="literal">false</span>;</span><br><span class="line"><span class="number">22</span>                 <span class="comment">//当出现第一个能被整除的数时立即跳出循环，可提高一定效率</span></span><br><span class="line"><span class="number">23</span>                 <span class="keyword">break</span>;</span><br><span class="line"><span class="number">24</span>             &#125;</span><br><span class="line"><span class="number">25</span>         &#125;</span><br><span class="line"><span class="number">26</span>         </span><br><span class="line"><span class="number">27</span>         <span class="keyword">if</span>(flag) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,i);</span><br><span class="line"><span class="number">28</span>     &#125;</span><br><span class="line"><span class="number">29</span>     </span><br><span class="line"><span class="number">30</span>     <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="number">31</span> &#125;</span><br></pre></td></tr></table></figure>

<p>这个最简单的写法在只判断几个素数时绰绰有余，但是当要打出一个很大的素数表时效率不足。</p>
<h1 id="埃氏筛法"><a href="#埃氏筛法" class="headerlink" title="埃氏筛法"></a>埃氏筛法</h1><p>时间复杂度$O(n \log n)$</p>
<p>任意一个素数的倍数是合数是埃氏筛法筛出素数表的主要原理。假设要打出$n$以内的素数表。我们从$2$开始向后遍历，每当遇到一个素数$p$时，便利用此素数将$2…n$内$p<em>2，p</em>3，p*4…$这些合数全部筛去。</p>
<p><strong>代码：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"> <span class="number">1</span> <span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"> <span class="number">2</span> <span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"> <span class="number">3</span> <span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"> <span class="number">4</span> <span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"> <span class="number">5</span> </span><br><span class="line"> <span class="number">6</span> <span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"> <span class="number">7</span> </span><br><span class="line"> <span class="number">8</span> <span class="type">int</span> n;</span><br><span class="line"> <span class="number">9</span> <span class="type">int</span> p[<span class="number">10000010</span>];</span><br><span class="line"><span class="number">10</span> </span><br><span class="line"><span class="number">11</span> <span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function">12 </span>&#123;</span><br><span class="line"><span class="number">13</span>     <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"><span class="number">14</span>     </span><br><span class="line"><span class="number">15</span>     <span class="comment">//初始化</span></span><br><span class="line"><span class="number">16</span>     <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++) p[i]=<span class="number">1</span>;</span><br><span class="line"><span class="number">17</span>     </span><br><span class="line"><span class="number">18</span>     <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=<span class="built_in">sqrt</span>(n)+<span class="number">0.5</span>;i++)</span><br><span class="line"><span class="number">19</span>         <span class="keyword">for</span>(<span class="type">int</span> j=i*<span class="number">2</span>;j&lt;=n;j+=i) p[j]=<span class="number">0</span>;</span><br><span class="line"><span class="number">20</span>     </span><br><span class="line"><span class="number">21</span>     <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)</span><br><span class="line"><span class="number">22</span>         <span class="keyword">if</span>(p[i]) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,i);</span><br><span class="line"><span class="number">23</span>     </span><br><span class="line"><span class="number">24</span>     <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="number">25</span> &#125;</span><br></pre></td></tr></table></figure>

<p>这个算法在一般的数据面前已经足够了。不过还可以更快。</p>
<h1 id="欧拉筛法"><a href="#欧拉筛法" class="headerlink" title="欧拉筛法"></a>欧拉筛法</h1><p>时间复杂度$O(n)$</p>
<p>首先观察一下埃氏筛法。我们发现有这样一个问题：在使用素数$2$进行筛去操作时，会筛去素数$6$；在之后利用素数$3$进行筛去操作时，会再筛去一次素数$6$。可见在埃氏筛法的筛去过程中，会出现同一个合数被筛去多次的情况，从而影响了效率。</p>
<p>相比之下，欧拉筛法是一种线性筛法。它便解决了埃氏筛法中一个合数会被筛去多次的问题，确保了每一个合数都只会被筛去一次，因此具有$O(n)$的效率。它的实现原理是<strong>确保每个合数都只会被它的最小质因数筛掉</strong>。过程大概如下：</p>
<p>首先我们会建立$2$个数组：$isp$（值为$1&#x2F;0$，$isp[i]$用来表示$i$是否是素数），$p$（用来储存所有的素数）。依旧是打出到$n$的素数表。</p>
<ol>
<li><p>从$2$开始遍历$i$。如果$i$是素数，就把它加入到数组$p$中。</p>
</li>
<li><p>对于每个$i$使用$j$遍历数组$p$，筛去$i * p[j]$，若$i * p[j] &gt; n$（已经没必要筛去了）或$i \mod p[j] &#x3D;&#x3D; 0$（<strong>这是确保每个合数只筛一次的核心</strong>）就退出循环。</p>
</li>
</ol>
<p><strong>对核心的解释：</strong>假设在$i \mod p[j] &#x3D;&#x3D; 0$时我们继续进行，便筛去了合数$i * p[j+1]$。由于此时$i \mod p[j] &#x3D;&#x3D; 0$，则这个由一个素数和一个合数的乘积组成的合数，一定能转化为一个更小的素数和一个更大的合数的乘积，那么当继续运行时，此合数必然还会被$p[j]$再次筛去，便进行了多余的筛去工作。因此可以说在$i \mod p[j] &#x3D;&#x3D; 0$时退出循环是确保每个合数都只会被它的最小质因数筛掉，即确保了每个合数只被筛一次。</p>
<p><strong>代码：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"> <span class="number">1</span> <span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"> <span class="number">2</span> <span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"> <span class="number">3</span> <span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"> <span class="number">4</span> </span><br><span class="line"> <span class="number">5</span> <span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"> <span class="number">6</span> </span><br><span class="line"> <span class="number">7</span> <span class="type">int</span> n;</span><br><span class="line"> <span class="number">8</span> <span class="type">int</span> num=<span class="number">0</span>;</span><br><span class="line"> <span class="number">9</span> <span class="type">int</span> isp[<span class="number">10000010</span>],p[<span class="number">10000010</span>];</span><br><span class="line"><span class="number">10</span> </span><br><span class="line"><span class="number">11</span> <span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function">12 </span>&#123;</span><br><span class="line"><span class="number">13</span>     <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"><span class="number">14</span>     </span><br><span class="line"><span class="number">15</span>     <span class="comment">//初始化</span></span><br><span class="line"><span class="number">16</span>     <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++) isp[i]=<span class="number">1</span>;</span><br><span class="line"><span class="number">17</span>     </span><br><span class="line"><span class="number">18</span>     <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)</span><br><span class="line"><span class="number">19</span>     &#123;</span><br><span class="line"><span class="number">20</span>         <span class="keyword">if</span>(isp[i])</span><br><span class="line"><span class="number">21</span>         &#123;</span><br><span class="line"><span class="number">22</span>             num++;</span><br><span class="line"><span class="number">23</span>             p[num]=i;</span><br><span class="line"><span class="number">24</span>         &#125;</span><br><span class="line"><span class="number">25</span>         <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=num&amp;&amp;i*p[j]&lt;=n;j++)</span><br><span class="line"><span class="number">26</span>         &#123;</span><br><span class="line"><span class="number">27</span>             isp[i*p[j]]=<span class="number">0</span>;</span><br><span class="line"><span class="number">28</span>             <span class="comment">//确保每个合数都只会被它的最小质因数筛掉</span></span><br><span class="line"><span class="number">29</span>             <span class="keyword">if</span>(i%p[j]==<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line"><span class="number">30</span>         &#125;</span><br><span class="line"><span class="number">31</span>     &#125;</span><br><span class="line"><span class="number">32</span>     </span><br><span class="line"><span class="number">33</span>     <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=num;i++) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,p[i]);</span><br><span class="line"><span class="number">34</span>     </span><br><span class="line"><span class="number">35</span>     <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="number">36</span> &#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法比赛</category>
      </categories>
      <tags>
        <tag>数论</tag>
      </tags>
  </entry>
  <entry>
    <title>网络流</title>
    <url>/2022/02/11/%E7%BD%91%E7%BB%9C%E6%B5%81/</url>
    <content><![CDATA[<h1 id="相关定义"><a href="#相关定义" class="headerlink" title="相关定义"></a>相关定义</h1><p>首先想象一张有n个点，m条边的有向图。</p>
<p><strong>源点</strong>：只出不进的点。</p>
<p><strong>汇点</strong>：只进不出的点。</p>
<p><strong>容量</strong>：边的属性，通常使用c[i, j]表示。</p>
<p><strong>流量</strong>：边的属性，通常使用f[i, j]表示。</p>
<p>可以把边想象成道路，容量即本路最多能承载的车流量，流量即车流量，显然<strong>流量≤容量</strong>。</p>
<p>可以把不是源点和汇点的点想象成没有储存功能的货物中转站，<strong>进入的流量&#x3D;出去的流量</strong>。</p>
<p><strong>最大流</strong>：若把源点比作工厂，问题就是求从工厂最大发出多少货物同时不超过道路的容量限制，即<strong>最大流</strong>。</p>
<p><strong>可行流</strong>：所有边上的流量都不超过容量的这一组流量（或者说这个流）。</p>
<p><strong>零流</strong>：所有流量都为0的流，易得零流是可行流。</p>
<p><strong>增广路</strong>：一条从源点到汇点的比之前的流大delta的流。（后面解释）</p>
<p><strong>残量网络</strong>：在原图的基础之上，添加每条边对应的反向边，并储存每条边的当前流量。残量网络会在算法进行的过程中被修改。</p>
<h1 id="求解思路"><a href="#求解思路" class="headerlink" title="求解思路"></a>求解思路</h1><ol>
<li>从零流开始考虑。假设存在一条从源点到汇点的路，其每一段都满足流量＜容量（注意不是≤）。</li>
<li>则一定能找到本路上每一段的(容量 - 流量)的<strong>最小值delta</strong>，显然本路上的每一段的流量加上delta仍是可行流。</li>
<li>于是我们得到了一个更大的流，他的流量为其原来的流量+delta，这条路被叫做<strong>增广路</strong>。我们不断地从起点开始寻找增广路，每次都对其进行增广，直到源点和汇点不连通，也就是找不到增广路为止。</li>
<li>当找不到增广路时，当前的流量就是最大流。</li>
</ol>
<h1 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h1><ul>
<li>寻找增广路可以简单的从源点开始做BFS，并不断修改这条路上的delta量，直到找到源点或者找不到增广路。</li>
<li>程序实现时，通常只用一个数组c记录容量，当流量+delta时使用容量-delta实现，从而方便程序实现。（个人认为此时数组c的意义发生了改变，叫做<strong>能容量</strong>，也就是当前状态下能容下的量更为准确，后面也使用本叫法）</li>
</ul>
<h1 id="增加反向边"><a href="#增加反向边" class="headerlink" title="增加反向边"></a>增加反向边</h1><p><strong>为什么增加反向边：</strong>在寻找增广路时不同的寻找顺序可能会导致结果不同，加入反向边使得能够自我调整寻找顺序。</p>
<p><strong>例子：</strong></p>
<p>求本模型最大流。</p>
<p><img src="/2022/02/11/%E7%BD%91%E7%BB%9C%E6%B5%81/1.jpg" alt="img"></p>
<p>找到1-2-3-4这条增广路，delta显然是1，进行修改。</p>
<p><img src="/2022/02/11/%E7%BD%91%E7%BB%9C%E6%B5%81/2.jpg" alt="img"></p>
<p>此时找不到增广路了，当前流量是1。但显然这不是正确答案。</p>
<p>正确答案应该是走1-2-4和1-3-4，得到流量为2的流。</p>
<p>因此可以看到，错误的找增广路顺序使程序得出了错误的答案，应当给程序一个“后悔”改路的机会，于是引入反向边。</p>
<p>反向边初始能容量均为0，每一次找到增广路时，进行如下操作。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">c[i][j]-=delta;	<span class="comment">//正向边减delta</span></span><br><span class="line">c[j][i]+=delta;	<span class="comment">//反向边加delta</span></span><br></pre></td></tr></table></figure>

<p>按此方法重新寻找到增广路1-2-3-4并修改。</p>
<p><img src="/2022/02/11/%E7%BD%91%E7%BB%9C%E6%B5%81/3.jpg" alt="img"></p>
<p>再次寻找增广路，找到1-3-2-4这条，delta为1，将这条路增广后不再有增广路，得到了最大流2。</p>
<p><img src="/2022/02/11/%E7%BD%91%E7%BB%9C%E6%B5%81/4.jpg" alt="img"></p>
<p>可以认为，两次通过的2、3的相反的等大小流相互抵消了，因此1-2-3-4与1-3-2-4这两个流合起来的作用效果也就是1-2-4和1-3-4这两个流加起来的作用效果。</p>
<h1 id="最大流"><a href="#最大流" class="headerlink" title="最大流"></a>最大流</h1><p><a href="https://www.luogu.com.cn/problem/P3376">模板题点我</a></p>
<p>听说有dinic和sap（isap），这里只写dinic。</p>
<h2 id="FF"><a href="#FF" class="headerlink" title="FF"></a>FF</h2><p>FF为一种直接深搜找增广路的暴力方法。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LL long long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n,m,s,t;</span><br><span class="line"><span class="type">int</span> a[<span class="number">210</span>],tot=<span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> vis[<span class="number">210</span>];</span><br><span class="line">LL ans=<span class="number">0</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	tot=1是为了更方便的找到反向边。 </span></span><br><span class="line"><span class="comment">	tot=1会使第一条边编号为2（二进制10），第二条边编号为3（二进制11），以此类推。</span></span><br><span class="line"><span class="comment">	又由于在加边时会把相反的两条边依次加入，所以每条边与他的反向边在编号上只在末位差1。</span></span><br><span class="line"><span class="comment">	因此只要将现编号与1异或就可以方便的得到反向边的编号。 </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">bian</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> to;</span><br><span class="line">	LL w;</span><br><span class="line">	<span class="type">int</span> next;</span><br><span class="line">&#125;e[<span class="number">10010</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> from,<span class="type">int</span> to,LL w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	tot++;</span><br><span class="line">	e[tot].next=a[from];</span><br><span class="line">	a[from]=tot;</span><br><span class="line">	e[tot].to=to;</span><br><span class="line">	e[tot].w=w;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">dfs</span><span class="params">(<span class="type">int</span> now,LL delta)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(now==t) <span class="keyword">return</span> delta;</span><br><span class="line">	</span><br><span class="line">	vis[now]=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> v=a[now];v;v=e[v].next)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> tto=e[v].to;</span><br><span class="line">		LL ww=e[v].w;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span>(vis[tto]||!ww) <span class="keyword">continue</span>;</span><br><span class="line">		</span><br><span class="line">		LL res=<span class="built_in">dfs</span>(tto,<span class="built_in">min</span>(delta,ww));</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span>(res)</span><br><span class="line">		&#123;</span><br><span class="line">			e[v].w-=res;</span><br><span class="line">			e[v^<span class="number">1</span>].w+=res; </span><br><span class="line">			</span><br><span class="line">			<span class="keyword">return</span> res;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	LL x,y,z;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d&quot;</span>,&amp;n,&amp;m,&amp;s,&amp;t);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld%lld&quot;</span>,&amp;x,&amp;y,&amp;z);</span><br><span class="line">		<span class="built_in">add</span>(x,y,z);</span><br><span class="line">		<span class="built_in">add</span>(y,x,<span class="number">0</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	LL lin;</span><br><span class="line">	<span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="built_in">sizeof</span>(vis));</span><br><span class="line">		lin=<span class="built_in">dfs</span>(s,<span class="number">1e18</span>);</span><br><span class="line">		<span class="keyword">if</span>(lin) ans+=lin;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>由于每次只找一条路，这条路还可能绕远路，而且增加流量是路上最小的权值，所以效率低。</p>
<p>网上有些题解试图简单卡 FF：</p>
<p><img src="/2022/02/11/%E7%BD%91%E7%BB%9C%E6%B5%81/5.gif" alt="img"></p>
<p>虽然这种图卡不掉FF，但是你可以看出，<strong>FF的复杂度和流量有关</strong>，这很糟糕。</p>
<h2 id="Dinic"><a href="#Dinic" class="headerlink" title="Dinic"></a>Dinic</h2><p>Dinic可解决FF效率低的问题。</p>
<ul>
<li><p>每次多路增广：u 点通过一条边，向 v 输出流量以后，v 会尝试到达汇点（到达汇点才真正增广），然后 v 返回实际增广量。这时，<strong>如果 u 还有没用完的供给，就继续尝试输出到其它边。</strong></p>
<p>但是要警惕绕远路、甚至绕回的情况，不加管制的话极易发生。怎么管？</p>
</li>
<li><p>源点<strong>顺着残量网络</strong>想要到达其它点，需要经过一些边对吧？<strong>按照经过的边数（即源点出发以后的距离）把图分层，即用 bfs 分层。</strong> 每次尝试给予时，<strong>只考虑给予自己下一层的点</strong>，就可以防止混乱。</p>
</li>
<li><p>综合上面两条。每回合也是从源点出发，<strong>先按照当前残量网络分一次层</strong>，随后多路增广，尽可能增加流量。增广过程中，会加入一些反向边，这些反向边逆着层次图，本回合并不会走。所以还需要进入下一回合。一直到 bfs 分层时搜不到汇点（即残量网络断了）为止。</p>
</li>
</ul>
<p>可是它每次只按照 bfs 分层的固定方向进行增广，还能保证正确性吗？这个好理解：只要图中还有增广路（源点顺着残量网络到达汇点的路），<strong>bfs 分层就会搜索到汇点</strong>，于是增广就不会停止，最终也止于没有增广路的局面。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LL long long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n,m,s,t;</span><br><span class="line"><span class="type">int</span> a[<span class="number">210</span>],tot=<span class="number">1</span>;	<span class="comment">//tot为1和FF同理 </span></span><br><span class="line"><span class="type">int</span> dep[<span class="number">210</span>];</span><br><span class="line">LL ans=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">bian</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> to;</span><br><span class="line">	LL w;</span><br><span class="line">	<span class="type">int</span> next;</span><br><span class="line">&#125;e[<span class="number">10010</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> from,<span class="type">int</span> to,LL w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	tot++;</span><br><span class="line">	e[tot].next=a[from];</span><br><span class="line">	a[from]=tot;</span><br><span class="line">	e[tot].to=to;</span><br><span class="line">	e[tot].w=w;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">memset</span>(dep,<span class="number">0</span>,<span class="built_in">sizeof</span>(dep));</span><br><span class="line">	<span class="type">int</span> l=<span class="number">1</span>,r=<span class="number">1</span>,q[<span class="number">210</span>];</span><br><span class="line">	q[l]=s;</span><br><span class="line">	dep[s]=<span class="number">1</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">while</span>(l&lt;=r)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> now=q[l++];</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> v=a[now];v;v=e[v].next)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="type">int</span> tto=e[v].to,ww=e[v].w;</span><br><span class="line">			</span><br><span class="line">			<span class="keyword">if</span>(ww&amp;&amp;!dep[tto])</span><br><span class="line">			&#123;</span><br><span class="line">				dep[tto]=dep[now]+<span class="number">1</span>;</span><br><span class="line">				q[++r]=tto;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> dep[t];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">dfs</span><span class="params">(<span class="type">int</span> now,LL in)</span>	<span class="comment">//in不一定真的能用掉 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(now==t) <span class="keyword">return</span> in;</span><br><span class="line">	</span><br><span class="line">	LL out=<span class="number">0</span>;	<span class="comment">//in是前面流入这点的流量，out是这点向下层发出的总流量 </span></span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> v=a[now];v;v=e[v].next)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> tto=e[v].to;</span><br><span class="line">		LL ww=e[v].w;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span>(ww&amp;&amp;dep[tto]==dep[now]+<span class="number">1</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			LL res=<span class="built_in">dfs</span>(tto,<span class="built_in">min</span>(in,ww));</span><br><span class="line">			e[v].w-=res;</span><br><span class="line">			e[v^<span class="number">1</span>].w+=res;</span><br><span class="line">			in-=res;</span><br><span class="line">			out+=res;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">if</span>(!out) dep[now]=<span class="number">0</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	LL x,y,z;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d&quot;</span>,&amp;n,&amp;m,&amp;s,&amp;t);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld%lld&quot;</span>,&amp;x,&amp;y,&amp;z);</span><br><span class="line">		<span class="built_in">add</span>(x,y,z);</span><br><span class="line">		<span class="built_in">add</span>(y,x,<span class="number">0</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">bfs</span>()) ans+=<span class="built_in">dfs</span>(s,<span class="number">1e18</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/2022/02/11/%E7%BD%91%E7%BB%9C%E6%B5%81/6.gif" alt="img"></p>
<p>注意理解多路增广：虽然一个点要枚举所有出边，但<strong>实质仍然是dfs</strong>，过程图类似于树。</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.cnblogs.com/ZJUT-jiangnan/p/3632525.html">https://www.cnblogs.com/ZJUT-jiangnan/p/3632525.html</a></p>
<p><a href="https://blog.csdn.net/weixin_43907802/article/details/84705855">https://blog.csdn.net/weixin_43907802/article/details/84705855</a></p>
<p><a href="https://www.luogu.com.cn/problem/solution/P3376">https://www.luogu.com.cn/problem/solution/P3376</a></p>
]]></content>
      <categories>
        <category>算法比赛</category>
      </categories>
      <tags>
        <tag>图论</tag>
      </tags>
  </entry>
  <entry>
    <title>除法取模</title>
    <url>/2022/05/12/%E9%99%A4%E6%B3%95%E5%8F%96%E6%A8%A1/</url>
    <content><![CDATA[<p>由费马小定理可推出：${1 \over a} % m &#x3D; a^{m - 2} % m$，其中$m$为素数。</p>
<p>那么，${b \over a} % m$就可以变成$b \cdot a^{m - 2} % m$。</p>
<p>当$m$太大时，可以使用<strong>快速幂</strong>。</p>
<p><a href="https://blog.csdn.net/qq742762377/article/details/83278688">来源</a></p>
]]></content>
      <categories>
        <category>算法比赛</category>
      </categories>
      <tags>
        <tag>数论</tag>
        <tag>模运算</tag>
      </tags>
  </entry>
</search>
